<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%--<%@ Property Name="NameSpace" Type="System.String" Default="Kryou" Category="Text" Description="Namespace for this class" %>--%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
// =================================================================== 
// 项目说明
//====================================================================
// 作者：liubo
// 文件： <%= GetClassName(SourceTable) %>Controllers.cs
// 项目名称：YiHao.Midd.API.Controllers
// 创建时间：<%=DateTime.Now.ToShortDateString() %>
// ===================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using YiHao.Comm.Common;
using YiHao.Entity.Enum;
using YiHao.Entity.Model;
using YiHao.Midd.BLL;
using YiHao.Comm.FileIO;
using YiHao.Entity;
using Yihao.Framework.DataAccess.DataAdo;

namespace YiHao.Midd.API.Controllers
{
    public class <%= GetClassName(SourceTable) %>Controller : BaseController
    {
        private  <%= GetClassName(SourceTable) %>BLL bll = new <%= GetClassName(SourceTable) %>BLL();

        #region Add
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <returns></returns>
        public ActionResult Add()
        {
            try
            {
                string model = QueryStringHelper.GetString("model");

                if (model == null || model.Trim() == "")
                {
                    result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                    return Json(result);
                }

                <%= GetClassName(SourceTable) %> Model = null;
                try
                {
                    Model = JsonHelper.JSONToObject<<%= GetClassName(SourceTable) %>>(model);
                }
                catch
                {
                    result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                    return Json(result);
                }

                if (bll.AddModel(Model) == 0)
                {
                    result.Success = false;
                }
            }
            catch (Exception e)
            {
                Log4Helper.Error("<%= GetClassName(SourceTable) %>_Add_Exception:" + e);
                result.Message = e.Message;
                result.Success = false;
            }

            return Json(result);
        }
       #endregion

        #region Delete
        /// <summary>
        /// 删除操作
        /// </summary>
        /// <returns></returns>
        public ActionResult Delete()
        {
            string itemId = HttpContext.Request.Params["itemId"];

            if (itemId == null || itemId.Trim() == "")
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_missing);
                return Json(result);
            }

            try
            {
                int flag = bll.DeleteForInt(itemId);
                if (flag > 0)
                {
                    result.Data = flag;
                    result.Message = "删除成功！";
                    return Json(result);
                }
                else
                {
                    result = new YiHao.Entity.Result(ErrorEnum.Error.failed);

                    return Json(result);
                }
            }
            catch
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                return Json(result);
            }

        }
        #endregion

        #region Update
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <returns></returns>
        public ActionResult Update()
        {
            string model = HttpContext.Request.Params["model"];

            if (model == null || model.Trim() == "")
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_missing);
                return Json(result);
            }

            <%= GetClassName(SourceTable) %> entity = null;
            try
            {
                entity = JsonHelper.Deserialize<<%= GetClassName(SourceTable) %>>(model);
            }
            catch
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                return Json(result);
            }


            int flagmain = bll.UpdateForInt(entity, false);
            if (flagmain > 0)
            {
                result.Code = "00";
                result.Message = "修改成功！";
                return Json(result);
            }
            else
            {
                result = new Result(ErrorEnum.Error.failed);
                return Json(result);
            }
        }
        #endregion

        #region GetModel
        /// <summary>
        /// 获取数据实体
        /// </summary>
        /// <returns></returns>
        public ActionResult GetModel()
        {
            int id = 0;
            int.TryParse(HttpContext.Request.Params["id"], out id);

            if (id <= 0)
            {
                result = new Entity.Result(ErrorEnum.Error.parameter_format_error);
                return Json(result);
            }
            <%= GetClassName(SourceTable) %> model = bll.GetModelByID(id);
            if (model == null)
            {
                result = new Entity.Result(ErrorEnum.Error.error_nodata);
                return Json(result);
            }

            result.Data = model;

            return Json(result);
        }
        #endregion

        #region QueryForList
        /// <summary>
        /// 获取数据集
        /// </summary>
        /// <returns>List<Sys_Category></returns>
        public ActionResult QueryForList()
        {
            int pageSize = 0;
            int.TryParse(HttpContext.Request.Params["pageSize"], out pageSize);

            if (pageSize > 0)
            {
                result.Data = bll.QueryForList(pageSize);
            }
            else
            {
                result.Data = bll.QueryForList();
            }

            return Json(result);
        }
        #endregion

        #region PageSearch
        /// <summary>
        /// 按条件搜索获取数据集
        /// </summary>
        /// <returns></returns>
        public ActionResult PageSearch()
        {
            string baseSearch = QueryStringHelper.GetString("model");
            string seacthType = QueryStringHelper.GetString("seacthType");
            
            if (String.IsNullOrEmpty(baseSearch))
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                return Json(result);
            }

            BaseSearch searchModel = null;
            try
            {
                switch (seacthType)
                {
                   // case "<%= GetClassName(SourceTable) %>Search": searchModel = JsonHelper.JSONToObject<<%= GetClassName(SourceTable) %>Search>(baseSearch); break;
                    default: searchModel = JsonHelper.JSONToObject<BaseSearch>(baseSearch); break;
                }
            }
            catch
            {
                result = new YiHao.Entity.Result(ErrorEnum.Error.parameter_format_error);
                return Json(result);
            }

            int total = 0;
            List<<%= GetClassName(SourceTable) %>> list = bll.PageSearch(searchModel, ref total);
            ResultSearchVal(searchModel, list, total);

            return Json(resultSearch);
        }
        #endregion

    }
}


<script runat="template">

    public string GetCamelCaseName(string value)
    {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    public string ConvertFirstCharToUpper(string value)
    {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }

    public string GetClassName(TableSchema table)
    {
        /*
        if (table.Name.EndsWith("s"))
        {
            return table.Name.Substring(0, table.Name.Length - 1);
        }
        else
        {
            return table.Name;
        }
		*/
		if(table==null)
		{
		    return null;
		}
		return table.Name;
    }

	public string GetLowerCaseName(string value)
    {
	    return value.ToLower();
    }
	
	public string GetModuleInstanceName(TableSchema table)
	{
		return "_"+table.Name+"Model";
	}

    public string GetCSharpVariableType(ColumnSchema column)
    {
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "string";
			case DbType.AnsiStringFixedLength: return "string";
			case DbType.Binary: return "byte[]";
			case DbType.Boolean: return "bool";
			case DbType.Byte: return "byte";
			case DbType.Currency: return "decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "decimal";
			case DbType.Double: return "double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "short";
			case DbType.Int32: return "int";
			case DbType.Int64: return "long";
			case DbType.Object: return "object";
			case DbType.SByte: return "sbyte";
			case DbType.Single: return "float";
			case DbType.String: return "string";
			case DbType.StringFixedLength: return "string";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "ushort";
			case DbType.UInt32: return "uint";
			case DbType.UInt64: return "ulong";
			case DbType.VarNumeric: return "decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
	public string GetPrimaryKeyCSharpType()
	{
		return GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]);
	}
</script>