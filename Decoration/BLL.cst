<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%--<%@ Property Name="NameSpace" Type="System.String" Default="YiHaoJiaJu.CMS" Category="Text" Description="Namespace for this class" %>--%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
// =================================================================== 
// 项目说明
//====================================================================
// 作者：liubo
// 文件： <%= GetClassName(SourceTable) %>.cs
// 项目名称：YiHao.Decoration.BLL
// 创建时间：<%=DateTime.Now.ToShortDateString() %>
// ===================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using YiHao.Entity;
using YiHao.Decoration.DAL;
using YiHao.Entity.Model;
using YiHao.Entity.Search;
using YiHao.Comm.Common;

namespace YiHao.Decoration.BLL
{
    public class <%= GetClassName(SourceTable) %>BLL
    {

        /// <summary>
        /// 分页获取数据集
        /// </summary>
        /// <param name="search"></param>
        /// <returns></returns>
        public static ResultSearch QueryListByPager(<%= GetClassName(SourceTable) %>Search search)
        {
            return <%= GetClassName(SourceTable) %>DAL.QueryListByPager(search);
        }

        /// <summary>
        /// 获取数据实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static <%= GetClassName(SourceTable) %> GetModel(int id)
        {
            var result = <%= GetClassName(SourceTable) %>DAL.GetModel(id);
            if (result.Success)
            {
                return JsonHelper.ObjectToModel<<%= GetClassName(SourceTable) %>>(result.Data);
            }

            return null;
        }

        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="mdoel"></param>
        /// <returns></returns>
        public static Result Update(<%= GetClassName(SourceTable) %> mdoel)
        {
            return <%= GetClassName(SourceTable) %>DAL.Update(mdoel);
        }

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="mdoel"></param>
        /// <returns></returns>
        public static Result Add(<%= GetClassName(SourceTable) %> mdoel)
        {
            return <%= GetClassName(SourceTable) %>DAL.Add(mdoel);
        }

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static Result Delete(string id)
        {
            return <%= GetClassName(SourceTable) %>DAL.Delete(id);
        }
    }
   
   
}
<script runat="template">

    public string GetCamelCaseName(string value)
    {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    public string ConvertFirstCharToUpper(string value)
    {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }

    public string GetClassName(TableSchema table)
    {
        /*
        if (table.Name.EndsWith("s"))
        {
            return table.Name.Substring(0, table.Name.Length - 1);
        }
        else
        {
            return table.Name;
        }
		*/
		if(table==null)
		{
		    return null;
		}
		return table.Name;
    }

	public string GetLowerCaseName(string value)
    {
	    return value.ToLower();
    }
	
	public string GetModuleInstanceName(TableSchema table)
	{
		return "_"+table.Name+"Model";
	}
	
	public string GetCSharpVariableType(ColumnSchema column)
    {
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "string";
			case DbType.AnsiStringFixedLength: return "string";
			case DbType.Binary: return "byte[]";
			case DbType.Boolean: return "bool";
			case DbType.Byte: return "byte";
			case DbType.Currency: return "decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "decimal";
			case DbType.Double: return "double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "short";
			case DbType.Int32: return "int";
			case DbType.Int64: return "long";
			case DbType.Object: return "object";
			case DbType.SByte: return "sbyte";
			case DbType.Single: return "float";
			case DbType.String: return "string";
			case DbType.StringFixedLength: return "string";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "ushort";
			case DbType.UInt32: return "uint";
			case DbType.UInt64: return "ulong";
			case DbType.VarNumeric: return "decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	public string GetPrimaryKeyCSharpType()
	{
		return GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]);
	}
	public string GetValidateInputString()
	{
		DbType dbtype = SourceTable.PrimaryKey.MemberColumns[0].DataType;
		string result = String.Empty;
		switch(dbtype)
		{
			case DbType.Byte:
			case DbType.Currency:
			case DbType.Decimal:
			case DbType.Int16:
			case DbType.Int32:
			case DbType.Int64:
			    result = "if(" + GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) + "<0)";
			    break;
			case DbType.AnsiStringFixedLength:
			case DbType.AnsiString:
			case DbType.String:
			case DbType.StringFixedLength:
			case DbType.Binary:
			    result = "if(" + GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) + ".Length==0)";
			    break;
			break;
			case DbType.Guid:
			    result = "if(" + GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) + "==null)";
			    break;
			case DbType.DateTime:
			case DbType.Date:
			    result = "if(" + GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) + "==null)";
			    break;
			default:
		        result = "if(" + GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) + "==null)";
			    break;
		}
		return result;
	}
</script>